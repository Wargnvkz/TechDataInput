// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechDataInput.DB;

#nullable disable

namespace TechDataInput.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250520093520_Initialization")]
    partial class Initialization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TechDataInput.Data.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipmentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentGroupId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("TechDataInput.Data.EquipmentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentGroups");
                });

            modelBuilder.Entity("TechDataInput.Data.MeasurementSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("MeasurementSessions");
                });

            modelBuilder.Entity("TechDataInput.Data.ParameterDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipmentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentGroupId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("ParameterDefinitions");
                });

            modelBuilder.Entity("TechDataInput.Data.ParameterValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MeasurementSessionId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementSessionId");

                    b.HasIndex("ParameterDefinitionId");

                    b.ToTable("ParameterValues");
                });

            modelBuilder.Entity("TechDataInput.Data.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TechDataInput.Data.Equipment", b =>
                {
                    b.HasOne("TechDataInput.Data.EquipmentGroup", "EquipmentGroup")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentGroup");
                });

            modelBuilder.Entity("TechDataInput.Data.MeasurementSession", b =>
                {
                    b.HasOne("TechDataInput.Data.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("TechDataInput.Data.ParameterDefinition", b =>
                {
                    b.HasOne("TechDataInput.Data.EquipmentGroup", "EquipmentGroup")
                        .WithMany("ParameterDefinitions")
                        .HasForeignKey("EquipmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechDataInput.Data.UserRole", "UserRole")
                        .WithMany("ParameterDefinitions")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentGroup");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("TechDataInput.Data.ParameterValue", b =>
                {
                    b.HasOne("TechDataInput.Data.MeasurementSession", "MeasurementSession")
                        .WithMany("Values")
                        .HasForeignKey("MeasurementSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechDataInput.Data.ParameterDefinition", "ParameterDefinition")
                        .WithMany()
                        .HasForeignKey("ParameterDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementSession");

                    b.Navigation("ParameterDefinition");
                });

            modelBuilder.Entity("TechDataInput.Data.EquipmentGroup", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("ParameterDefinitions");
                });

            modelBuilder.Entity("TechDataInput.Data.MeasurementSession", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("TechDataInput.Data.UserRole", b =>
                {
                    b.Navigation("ParameterDefinitions");
                });
#pragma warning restore 612, 618
        }
    }
}
